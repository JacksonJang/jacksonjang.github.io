

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>Jacksonjang Blog</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-08-03T17:40:10+09:00</updated>
  <author>
    <name>Jacksonjang</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Jacksonjang </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>[Spring Boot] 에러를 효과적으로 처리하는 2가지 방법(@ExceptionHandler, @ControllerAdvice 사용)</title>
    <link href="/posts/spring-boot-error-handler/" rel="alternate" type="text/html" title="[Spring Boot] 에러를 효과적으로 처리하는 2가지 방법(@ExceptionHandler, @ControllerAdvice 사용)" />
    <published>2025-08-03T23:00:00+09:00</published>
  
    <updated>2025-08-03T23:00:00+09:00</updated>
  
    <id>/posts/spring-boot-error-handler/</id>
    <content type="text/html" src="/posts/spring-boot-error-handler/" />
    <author>
      <name>JacksonJang</name>
    </author>

  
    
    <category term="Spring Boot" />
    
  

  <summary>왜 필요해요? 프로젝트를 진행하다 보면 에러 응답 포맷을 변경해야 하는 상황이 생길 수 있습니다. 예를 들어, 고객 요구사항 변경, 공통 응답 규격 개편, 코드 리팩터링 등..  이때 모든 컨트롤러에 동일한 보일러플레이트 코드가 존재해서 수정할 때 유지보수 비용이 커집니다.    try-catch 문 @RestController public class TryCatchController {    @GetMapping(&amp;quot;/tryCatch&amp;quot;)   public String tryCatch() {     try {       throw new IllegalArgumentException(&amp;quot;IllegalArgument 에러&amp;quot;);     } catch (Exception e) {       return &amp;quot;에러가 발...</summary>

  </entry>

  
  <entry>
    <title>[JavaScript] null vs undefined 차이 제대로 알기</title>
    <link href="/posts/js-null-undefined/" rel="alternate" type="text/html" title="[JavaScript] null vs undefined 차이 제대로 알기" />
    <published>2025-07-28T03:00:00+09:00</published>
  
    <updated>2025-07-28T03:00:00+09:00</updated>
  
    <id>/posts/js-null-undefined/</id>
    <content type="text/html" src="/posts/js-null-undefined/" />
    <author>
      <name>JacksonJang</name>
    </author>

  
    
    <category term="JavaScript" />
    
  

  <summary>JavaScript 의 null, undefined 알아보기 undefined 의미 JavaScript에서 undefined는 변수를 선언하고 값을 할당하지 않은 상태를 의미합니다. let x;    null 의미 null은 변수를 선언하고 빈 값을 할당한 상태입니다. let x = null;    위 차이에 대해 구분하는 테스트하기(typeof 사용) JavaScript에서는 typeof 라는 연산자가 있습니다.  이 연산자를 이용해서 타입들에 대해 볼 수 있는데 아래와 같이 Console 창에서 바로 확인 가능합니다.    typeof null         // &amp;#39;object&amp;#39; typeof undefined    // &amp;#39;undefined&amp;#39; typeof 1            // &amp;#39;number&amp;#39; ...</summary>

  </entry>

  
  <entry>
    <title>[SwiftUI] @ObservedObject vs @StateObject</title>
    <link href="/posts/ObservedObject-vs-StateObject/" rel="alternate" type="text/html" title="[SwiftUI] @ObservedObject vs @StateObject" />
    <published>2024-08-06T04:00:00+09:00</published>
  
    <updated>2024-08-06T04:00:00+09:00</updated>
  
    <id>/posts/ObservedObject-vs-StateObject/</id>
    <content type="text/html" src="/posts/ObservedObject-vs-StateObject/" />
    <author>
      <name>JacksonJang</name>
    </author>

  
    
    <category term="iOS" />
    
  

  <summary>핵심 정리    공통점 : 객체의 상태 변화를 감지하고 뷰를 업데이트하는 데 사용되는 속성 래퍼입니다.   @StateObject는 부모 뷰가 직접 객체를 소유하고 관리합니다.   @ObservedObject는 부모 뷰에서 객체를 관찰하고 업데이트를 반영합니다.   ObservableObject 란? @StateObject 와 @ObservedObject에 대해 알기 전에 우선적으로 ObservableObject 라는 프로토콜에 대해 이해할 필요가 있습니다.  @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *) public protocol ObservableObject : AnyObject {      /// The type of publishe...</summary>

  </entry>

  
  <entry>
    <title>[iOS] Tuist 사용하기 (1)</title>
    <link href="/posts/How-to-use-Tuist/" rel="alternate" type="text/html" title="[iOS] Tuist 사용하기 (1)" />
    <published>2024-08-01T04:00:00+09:00</published>
  
    <updated>2024-08-01T04:00:00+09:00</updated>
  
    <id>/posts/How-to-use-Tuist/</id>
    <content type="text/html" src="/posts/How-to-use-Tuist/" />
    <author>
      <name>JacksonJang</name>
    </author>

  
    
    <category term="iOS" />
    
  

  <summary>Tuist 주소 https://github.com/tuist/tuist  Tuist 란? Tuist is a command line tool that leverages project generation to abstract intricacies of Xcode projects, and uses it as a foundation to help teams maintain and optimize their large modular projects.  Tuist는 추상적인 복잡한 Xcode의 프로젝트들을 생성하는 CLI 툴이며, 큰 모듈화된 프로젝트들을 최적화하며 팀의 유지보수 하는데 도움을 줍니다.  간단히 말하면 Xcode 프로젝트를 관리하는 툴입니다.  Tuist의 필요성 협업을 하다보면 Xcode 프로...</summary>

  </entry>

  
  <entry>
    <title>[Mac] VSCode 연속입력 키보드 이슈 해결</title>
    <link href="/posts/vscode-tip-1/" rel="alternate" type="text/html" title="[Mac] VSCode 연속입력 키보드 이슈 해결" />
    <published>2024-05-19T10:00:00+09:00</published>
  
    <updated>2024-05-19T10:00:00+09:00</updated>
  
    <id>/posts/vscode-tip-1/</id>
    <content type="text/html" src="/posts/vscode-tip-1/" />
    <author>
      <name>JacksonJang</name>
    </author>

  
    
    <category term="Etc" />
    
  

  <summary>매 번 블로그를 작성하면서 vscode 를 사용하고 있었는데, 자꾸 키보드 타이핑을 하면서 화살표로 움직이거나 한글을 입력하고 스페이스를 하면 글자가 짤리는 그런 이슈들이 있어서 짜증나서 알아보게 되어서 메모용으로 기록합니다.  defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false   위 코드를 터미널에 입력 후 VSCode를 재 실행하면 끝!</summary>

  </entry>

</feed>


